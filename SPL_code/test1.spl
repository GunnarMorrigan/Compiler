get_my_name() :: Bool -> Char {
    return ’m’:’y’:’N’:’a’:’m’:’e’:[];
}

printTillN(n) :: Int -> Void {
    Int x = 0;
    while(x < n) {
        print (x);
        Int x = x + 1;
    }
    return;
}

headIsEqualTo(list eq) :: [Int] Int -> Bool {
    if(!list.isEmpty) {
        return list.hd == eq;
    }
    return False;
}

editTuple(tuple flip) :: (Int, Int) Bool -> (Int, Int) {
    (Int, Int) returnVar = (0,0);
    if(flip) {
        returnVar = (tuple.snd, tuple.fst);
        return returnVar;
    }
    else {
        if (flip.fst == flip.snd) {
            returnVar = removeFirst(flip);
            return returnVar;
        }
    }
    return tuple;
}


niceFunction (a b n) :: [Char] Bool Int -> Void {
    if(a.isEmpty) {
        return;
    }
    [Char] c = a.hd;
    if(c.tl.hd == 'a') {
        return;
    }
    print (c);
}