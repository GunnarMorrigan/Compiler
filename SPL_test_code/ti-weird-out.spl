swapCopy (pair) :: (e, f) -> (f, e) {
    return (pair.snd, pair.fst);
}

swap (tuple) :: (j, j) -> (j, j) {
    i tmp = tuple.fst;

    tuple.fst = tuple.snd;
    tuple.snd = tmp;
    return tuple;
}

squareOddNumbers (list) :: [Int] -> [Int] {
    while (!(isEmpty(list) && ((list.hd % 2) == 0))) {
        list = list.tl;
    }
    if (!isEmpty(list)) {
        list.hd = (list.hd * list.hd);
        list.tl = squareOddNumbers(list.tl);
    }
    return list;
}

reverse (list) :: [x] -> [x] {
    [v] accu = [];

    while (!isEmpty(list)) {
        accu = (list.hd : accu);
        list = list.tl;
    }
    return accu;
}

product (list) :: [Int] -> Int {
    if (isEmpty(list)) {
        return 1;
    } else {
        return (list.hd * product(list.tl));
    }
}

fromTo (from, to) :: Int Int -> [Int] {
    if ((from <= to)) {
        return (from : fromTo((from + 1),to));
    } else {
        return [];
    }
}

facR (n) :: Int -> Int {
    if ((n < 2)) {
        return 1;
    } else {
        return (n * facR((n - 1)));
    }
}

facL (n) :: Int -> Int {
    return product(fromTo(1,n));
}

facI (n) :: Int -> Int {
    Int r = 1;

    while ((n > 1)) {
        r = (r * n);
        n = (n - 1);
    }
    return r;
}

main () :: Void {
    Int n = 0;
    Int facN = 1;
    Bool ok = True;

    while ((n < 20)) {
        facN = facR(n);
        if (((facN != facI(n)) || (facN != facL(n)))) {
            print((n : (facN : (facI(n) : (facL(n) : [])))));
            ok = False;
        }
        n = (n + 1);
    }
    print(ok);
}

append (l1, l2) :: [a] [[a]] -> [ar] {
    if (isEmpty(l1)) {
        return l2;
    } else {
        l1.tl = append(l1.tl,l2);
        return l1;
    }
}

abs (n) :: Int -> Int {
    if ((n < 0)) {
        return -n;
    } else {
        return n;
    }
}

