Int a = 10;
Char b = 'L';
Char g = 'L';

equal (x, y) :: Ord d => d d -> Bool {
	return (x < y);
}

[e] list = [];

assign (l) :: [e] -> Void {
	list = l;
	return;
}

main () :: Void {
	assign((True : []));
	return;
}

swap (tuple) :: (n, n) -> (n, n) {
	var tmp = tuple.fst;

	tuple.fst = tuple.snd;
	tuple.snd = tmp;
	return tuple;
}

function2 (a, b) :: Bool Int -> Int {
	while (a) {
		return 10;
		return 10;
	}
	return b;
}

