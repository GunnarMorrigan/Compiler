swap (tuple) :: (a, a) -> (a, a) {
    var tmp = tuple.fst;

    tuple = (tuple.snd, tmp);
    return tuple;
}

(Int, Char) hoi = (1, 'c');
(Int, Char) hoi2 = hoi;
(Char, Char) doei = swap(hoi) /*:: Nothing*/;

callD (i) :: Int -> Void {
    callD((i - 1)) /*:: Nothing*/;
}

callA (i) :: Int -> Void {
    callB((i - 1)) /*:: Nothing*/;
}

callB (i) :: Int -> Void {
    callC((i - 1)) /*:: Nothing*/;
}

callC (i) :: Int -> Void {
    callA((i - 1)) /*:: Nothing*/;
}

